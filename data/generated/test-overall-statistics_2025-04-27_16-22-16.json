{
  "create a channel from the source node to the destination node" : {
    "testName" : "create a channel from the source node to the destination node",
    "succeeded" : 0,
    "nonCompiling" : 26,
    "failed" : 4,
    "genericErrors" : 0
  },
  "collect the max ID in the network on each node" : {
    "testName" : "collect the max ID in the network on each node",
    "succeeded" : 0,
    "nonCompiling" : 18,
    "failed" : 12,
    "genericErrors" : 0
  },
  "calculate the gradient with distance from source" : {
    "testName" : "calculate the gradient with distance from source",
    "succeeded" : 0,
    "nonCompiling" : 22,
    "failed" : 8,
    "genericErrors" : 0
  },
  "calculate the gradient (with obstacles) with distance from source" : {
    "testName" : "calculate the gradient (with obstacles) with distance from source",
    "succeeded" : 0,
    "nonCompiling" : 24,
    "failed" : 6,
    "genericErrors" : 0
  },
  "count neighbors excluding self" : {
    "testName" : "count neighbors excluding self",
    "succeeded" : 0,
    "nonCompiling" : 16,
    "failed" : 14,
    "genericErrors" : 0
  },
  "create a channel (with obstacles) from the source node to the destination node" : {
    "testName" : "create a channel (with obstacles) from the source node to the destination node",
    "succeeded" : 0,
    "nonCompiling" : 26,
    "failed" : 4,
    "genericErrors" : 0
  },
  "count down from 1000 to 0" : {
    "testName" : "count down from 1000 to 0",
    "succeeded" : 0,
    "nonCompiling" : 21,
    "failed" : 9,
    "genericErrors" : 0
  },
  "SCR where temperature is above 30 degrees within the area" : {
    "testName" : "SCR where temperature is above 30 degrees within the area",
    "succeeded" : 0,
    "nonCompiling" : 27,
    "failed" : 3,
    "genericErrors" : 0
  },
  "calculate the min distance from neighbors, in a grid" : {
    "testName" : "calculate the min distance from neighbors, in a grid",
    "succeeded" : 0,
    "nonCompiling" : 22,
    "failed" : 8,
    "genericErrors" : 0
  },
  "count neighbors" : {
    "testName" : "count neighbors",
    "succeeded" : 0,
    "nonCompiling" : 19,
    "failed" : 11,
    "genericErrors" : 0
  },
  "gather the IDs of their neighbors" : {
    "testName" : "gather the IDs of their neighbors",
    "succeeded" : 0,
    "nonCompiling" : 26,
    "failed" : 0,
    "genericErrors" : 4
  }
}