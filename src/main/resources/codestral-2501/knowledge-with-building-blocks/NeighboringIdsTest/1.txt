To gather a list of IDs of all neighbors for each node in a distributed system where each node runs a local program and communicates with its neighbors, you can use the `foldhood` construct. The `nbr` function is used to access data from a neighbor, and you can collect these IDs using aggregation.

Here's the main body of the `main` function written in Scala to achieve this:

```scala
foldhood(List.empty[ID])(_ ++ _)(nbr(mid()))
```

This code utilizes the `foldhood` function to aggregate the IDs of all neighbors (including the current node) into a list. The `nbr` function is used to access the `mid` (a function that returns the ID of the neighbor), and the `foldhood` function combines these IDs into a single list.

### Explanation:
- `List.empty[ID]`: Initializes an empty list to start the aggregation.
- `_ ++ _`: Concatenates two lists, appending the IDs of the neighbors to the initial list.
- `nbr(mid())`: Accesses the ID of each neighbor.

### Example Usage:
Given a network like `0 - 1 - 2`, the output for each node will be:

- Node 0: `List(0, 1, 2)` (IDs of neighbors including itself)
- Node 1: `List(0, 1, 2)` (IDs of neighbors including itself)
- Node 2: `List(0, 1, 2)` (IDs of neighbors including itself)

This approach ensures that each node gathers a complete list of its neighbors' IDs, including its own ID.