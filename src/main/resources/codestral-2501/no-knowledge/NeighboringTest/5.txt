```scala
import org.scalafi.core._
import org.scalafi.core.ScaFi._
import org.scalafi.space._

// Define the space and the grid
val grid = Grid2D(10, 10)

// Initialize the grid with random values
val randomGrid = grid.map(_ => Random.nextInt(2))

// Define the count neighbors function
def countNeighbors(grid: Grid2D[Int], x: Int, y: Int): Int = {
  val neighbors = Seq(
    (x - 1, y - 1), (x, y - 1), (x + 1, y - 1),
    (x - 1, y),               (x + 1, y),
    (x - 1, y + 1), (x, y + 1), (x + 1, y + 1)
  ).filter { case (i, j) => grid.contains(i, j) && grid(i, j) == 1 }
  neighbors.size
}

// Apply the count neighbors function to each cell
val neighborCounts = grid.map { case (i, j) => countNeighbors(randomGrid, i, j) }

// Print the resulting grid of neighbor counts
neighborCounts.foreach(println)
```