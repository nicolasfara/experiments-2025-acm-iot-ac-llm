```scala
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._
import org.apache.spark.sql.expressions.Window
import org.apache.spark.sql.expressions.WindowSpec

val spark = SparkSession.builder.appName("EuclideanDistanceCalculation").getOrCreate()
import spark.implicits._

val df = spark.table("sensors")

val windowSpec = Window.partitionBy("sensor_name").orderBy("timestamp")

val dfWithLag = df
  .withColumn("prev_lat", lag("latitude", 1).over(windowSpec))
  .withColumn("prev_long", lag("longitude", 1).over(windowSpec))

val dfWithDistance = dfWithLag
  .withColumn("distance", when(col("sensor_name") === "source", 0.0)
    .otherwise(
      sqrt(
        pow(col("latitude") - col("prev_lat"), 2) +
        pow(col("longitude") - col("prev_long"), 2)
      )
    )
  )
  .drop("prev_lat", "prev_long")

dfWithDistance.select("timestamp", "sensor_name", "distance").show()
```