To create a channel from the source node to the destination node, you need to implement the necessary DSL constructs and logic. Here is the resulting Scala code for creating a channel:

```scala
rep(List.empty[(Node, Node)]) { channels =>
  val source = mid() // Assuming mid() returns the current node's ID
  val destination = nbr(mid()) // Assuming nbr(mid()) returns the neighbor node's ID
  if (nbr(sense[Boolean]("channelRequest")) && destination != source) {
    channels ++ List((source, destination))
  } else {
    channels
  }
}
```

In this code:
1. `rep(List.empty[(Node, Node)])` initializes an empty list to store the channels.
2. `channels ++ List((source, destination))` adds a new channel from the source to the destination if the neighbor node requests a channel.
3. `if (nbr(sense[Boolean]("channelRequest")) && destination != source)` checks if the neighbor node is requesting a channel and ensures the destination is not the same as the source.
4. The evolved list `channels` is returned, which will be used in the next iteration.

This implementation ensures that the channel is created only if the neighbor node requests it and the destination is different from the source.