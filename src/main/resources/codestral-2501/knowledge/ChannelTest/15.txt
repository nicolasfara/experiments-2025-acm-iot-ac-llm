Sure, given the constraints and requirements, here is the Scala code for creating a channel from the source node to the destination node:

```scala
branch(sense[Boolean]("source")) {
  val destinationId = sense[ID]("destination")
  val destination = foldhoodPlus(List.empty[(Double, ID)])(_ ++ _)(List(nbrRange() -> nbr(mid())))
  destination.find(_._2 == destinationId).map(_._1).getOrElse(Double.MaxValue)
} {
  Double.MaxValue
}
```

This code performs the following steps:

1. **Branch based on the source condition**: It checks if the current node is the source node using `sense[Boolean]("source")`.
2. **Determine the destination ID**: If the current node is the source, it retrieves the destination node ID using `sense[ID]("destination")`.
3. **Find the closest neighbor**: It uses `foldhoodPlus` to find the closest neighbor to the destination node excluding itself.
4. **Return the distance**: If the destination node is found among the neighbors, it returns the distance. Otherwise, it returns `Double.MaxValue`.

This code ensures that the communication and computation are handled according to the aggregate computing paradigm and the given constraints.