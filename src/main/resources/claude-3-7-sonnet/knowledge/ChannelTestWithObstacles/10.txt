{
  val source = sense[Boolean]("source")
  val destination = sense[Boolean]("destination")
  val obstacle = sense[Boolean]("obstacle")
  
  val distance = rep(Double.PositiveInfinity) { d =>
    mux(source) {
      0.0
    } {
      mux(obstacle) {
        Double.PositiveInfinity
      } {
        minHoodPlus(nbr(d) + nbrRange())
      }
    }
  }
  
  val isChannel = rep(false) { ch =>
    mux(destination) {
      val gradToSource = minHoodPlus(nbr(distance) + nbrRange())
      val isOnPath = distance == gradToSource
      isOnPath
    } {
      mux(source) {
        false
      } {
        mux(obstacle) {
          false
        } {
          anyHood(nbr(ch))
        }
      }
    }
  }
  
  isChannel && distance < Double.PositiveInfinity
}