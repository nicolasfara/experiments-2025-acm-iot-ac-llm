```scala
rep((0.0, false)) { case (avgTemp, alarm) =>
  val isHot = sense[Double]("temperature") > 30
  val neighbours = foldhoodPlus(List.empty[(Double, Boolean)])(_ ++ _)(List((sense[Double]("temperature"), isHot)))
  val localTemp = sense[Double]("temperature")
  val areaAvgTemp = (localTemp + sumHood(neighbours.map(_._1))) / (1 + foldhoodPlus(0)(_ + _)(nbr(1)))
  val areaAlarm = isHot || foldhoodPlus(false)(_ || _)(nbr(isHot))
  (areaAvgTemp, areaAlarm)
}._2
```