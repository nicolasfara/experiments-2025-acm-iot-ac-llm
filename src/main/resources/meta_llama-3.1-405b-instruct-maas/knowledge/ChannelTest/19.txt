rep(Unit) { _ =>
  val src = sense[Int]("source")
  val dst = sense[Int]("destination")
  val minIds = foldhood(List.empty[(Int, Int)]) { (l1, l2) =>
    l1 ++ l2
  } { List(nbr(mid()) -> nbr(mid())) }
  val path = minIds.filter(_._1 == src).map(_._2)
  val nextHop = if (path.contains(mid())) {
    if (mid() == dst) {
      mid()
    } else {
      path.filterNot(_ == mid()).minBy { x =>
        minHood((nbrRange(), nbr(mid())))._1
      }
    }
  } else {
    -1
  }
  nextHop
}